type: codeforces
files:
- name: src/Main.java
  visible: true
  text: "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public\
    \ static FastIO io;\n    \n    public static void main(String[] args) throws IOException\
    \ {\n        io = new FastIO(false);\n        \n        int totalTC = io.nextInt();\n\
    \        for (int t = 1; t <= totalTC; t++) {    \n            new Main().solution();\n\
    \        }\n    }\n    \n    public void solution() {\n        \n    }\n    \n\
    \    static class FastIO extends PrintWriter {\n        BufferedReader br;\n \
    \       StringTokenizer st;\n\n        public FastIO(boolean fileInOut) throws\
    \ FileNotFoundException {\n            super(fileInOut ? new FileOutputStream(\"\
    out.txt\") : System.out, true);\n            br = new BufferedReader(new InputStreamReader(fileInOut\
    \ ? new FileInputStream(\"in.txt\") : System.in));\n        }\n\n        String\
    \ next() {\n            while (st == null || !st.hasMoreElements()) {\n      \
    \          try {\n                    st = new StringTokenizer(br.readLine());\n\
    \                } catch (IOException e) {\n                    e.printStackTrace();\n\
    \                }\n            }\n            return st.nextToken();\n      \
    \  }\n\n        int nextInt() {\n            return Integer.parseInt(next());\n\
    \        }\n\n        long nextLong() {\n            return Long.parseLong(next());\n\
    \        }\n\n        double nextDouble() {\n            return Double.parseDouble(next());\n\
    \        }\n\n        String nextLine() {\n            String str = \"\";\n  \
    \          try {\n                str = br.readLine();\n            } catch (IOException\
    \ e) {\n                e.printStackTrace();\n            }\n            return\
    \ str;\n        }\n\n        int[] nextInts() {\n            int N = nextInt();\n\
    \            return nextInts(N);\n        }\n\n        int[] nextInts(int N) {\n\
    \            var res = new int[N];\n            for (int i = 0; i < N; i++) {\n\
    \                res[i] = nextInt();\n            }\n            return res;\n\
    \        }\n\n        void print(int[] n) {\n            if (n.length == 0) return;\n\
    \            for (int i = 0; i < n.length - 1; i++) {\n                io.print(n[i]\
    \ + \" \");\n            }\n            io.println(n[n.length - 1]);\n       \
    \ }\n\n        void reversePrint(int[] n) {\n            if (n.length == 0) return;\n\
    \            for (int i = n.length - 1; i > 0; i--) {\n                io.print(n[i]\
    \ + \" \");\n            }\n            io.println(n[0]);\n        }\n\n     \
    \   void print(List<Integer> n) {\n            if (n.size() == 0) return;\n  \
    \          for (int i = 0; i < n.size() - 1; i++) {\n                io.print(n.get(i)\
    \ + \" \");\n            }\n            io.println(n.get(n.size() - 1));\n   \
    \     }\n\n        void reversePrint(List<Integer> n) {\n            if (n.size()\
    \ == 0) return;\n            for (int i = n.size() - 1; i > 0; i--) {\n      \
    \          io.print(n.get(i) + \" \");\n            }\n            io.println(n.get(0));\n\
    \        }\n    }\n    \n    static class Util {\n\n        public static List<Integer>\
    \ getPrimeNumbers(int n) {\n            if (n < 2) return Collections.emptyList();\n\
    \n            var isComposite = new boolean[n + 1];\n\n            for (int j\
    \ = 2 * 2; j <= n; j += 2) isComposite[j] = true;\n\n            for (int i =\
    \ 3; i * i <= n; i += 2) {\n                if (isComposite[i]) continue;\n  \
    \              for (int j = i * i; j <= n; j += i) {\n                    isComposite[j]\
    \ = true;\n                }\n            }\n\n            List<Integer> list\
    \ = new ArrayList<>();\n            list.add(2);\n            for (int i = 3;\
    \ i <= n; i += 2) {\n                if (!isComposite[i]) list.add(i);\n     \
    \       }\n\n            return list;\n        }\n\n        static int[] getPrefixSumArray(int[]\
    \ A) {\n\n            int[] prefixSum = new int[A.length];\n            prefixSum[0]\
    \ = A[0];\n            for (int i = 1; i < A.length; i++) {\n                prefixSum[i]\
    \ = prefixSum[i - 1] + A[i];\n            }\n\n            return prefixSum;\n\
    \        }\n\n        static int[] getSuffixSumArray(int[] A) {\n\n          \
    \  int[] suffixSum = new int[A.length];\n            suffixSum[A.length - 1] =\
    \ A[A.length - 1];\n            for (int i = A.length - 2; i >= 0; i--) {\n  \
    \              suffixSum[i] = suffixSum[i + 1] + A[i];\n            }\n\n    \
    \        return suffixSum;\n        }\n\n        public static int hex2Decimal(String\
    \ s) {\n            String digits = \"0123456789ABCDEF\";\n            s = s.toUpperCase();\n\
    \            int val = 0;\n            for (int i = 0; i < s.length(); i++) {\n\
    \                char c = s.charAt(i);\n                int d = digits.indexOf(c);\n\
    \                val = 16 * val + d;\n            }\n            return val;\n\
    \        }\n\n        // precondition:  d is a nonnegative integer\n        public\
    \ static String decimal2Hex(int d) {\n            String digits = \"0123456789ABCDEF\"\
    ;\n            if (d == 0) return \"0\";\n            String hex = \"\";\n   \
    \         while (d > 0) {\n                int digit = d % 16;               \
    \ // rightmost digit\n                hex = digits.charAt(digit) + hex;  // string\
    \ concatenation\n                d = d / 16;\n            }\n            return\
    \ hex;\n        }\n\n        static int gcd(int a, int b) {\n            if (a\
    \ % b == 0) return b;\n            return gcd(b, a % b);\n        }\n\n      \
    \  static int lcm(int a, int b) {\n            return (a * b) / gcd(a, b);\n \
    \       }\n\n        static int gcd(List<Integer> list) {\n            int ans\
    \ = 1;\n            for (int i = 0; i < list.size(); i++) {\n                ans\
    \ = gcd(ans, list.get(i));\n            }\n            return ans;\n        }\n\
    \n        static int lcm(List<Integer> list) {\n            int ans = 1;\n   \
    \         for (int i = 0; i < list.size(); i++) {\n                ans = lcm(ans,\
    \ list.get(i));\n            }\n            return ans;\n        }\n    }\n}\n"
  learner_created: false
- name: testData/1/input.txt
  visible: true
  text: |-
    10
    1 1 2 2
    3 4 5 7
    8 9 15 18
    12 21 14 24
    36 60 48 66
    1024 729 373248 730
    1024 729 373247 730
    5040 40320 40319 1000000000
    999999999 999999999 1000000000 1000000000
    268435456 268435456 1000000000 1000000000
  learner_created: false
- name: testData/1/output.txt
  visible: true
  text: |-
    2 2
    4 6
    12 12
    -1 -1
    -1 -1
    373248 730
    -1 -1
    15120 53760
    -1 -1
    536870912 536870912
  learner_created: false
feedback_link: https://codeforces.com/contest/1744/problem/E2?locale=en
status: Unchecked
