{
	// Place your snippets for cpp here.

    // Each snippet is defined under a snippet name and has a prefix, body and description.
    // The prefix is what is used to trigger the snippet and the body will be expanded and inserted.

    // Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.

    // Placeholders with the same ids are connected.

	// Example:

	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
  
	/*************************************/
	//          Oneline codes related
	/*************************************/

	"LLONG_MAX $0": {
		"prefix": "inf",
		"body": [
			"LLONG_MAX $0",
		],
	},

	"push_back($1);": {
		"prefix": "pb",
		"body": [
			"push_back($1);",
			"$0",
		],
	},

	"emplace_back($1);": {
		"prefix": "eb",
		"body": [
			"emplace_back($1);",
			"$0",
		],
	},

	"emplace($1);": {
		"prefix": "em",
		"body": [
			"emplace($1);",
			"$0",
		],
	},

	"long long $1;": {
		"prefix": "ll",
		"body": [
			"long long $1;",
			"$0",
		],
	},

	"printf(\"$1\", $2);": {
		"prefix": "pf",
		"body": [
			"printf(\"$1\", $2);",
			"$0",
		],
	},

	"make_tuple($1);": {
		"prefix": "mt",
		"body": [
			"make_tuple($1);",
			"$0",
		],
	},


	/*************************************/
	//          function/method related
	/*************************************/

	"create void function": {
		"prefix": "vf",
		"body": [
			"void $1($2) {",
			"    $0",
			"}",
		],
	},

	"create function with return": {
		"prefix": "rf",
		"body": [
			"$1 $2($3) {",
			"    $1 $4;",
			"    $0",
			"    return $4;",
			"}",
		],
	},

	"Read multiple variables at once": {
		"prefix": "read",
		"body": [
			"void read() {}",
			"",
			"template <class Arg, class... Rest>",
			"void read(Arg &arg, Rest &...rest) {",
			"  cin >> arg;",
			"  read(rest...);",
			"}",
			"$0",
		],
	},


	/***************************************/
	//         IO Utility Class
	/***************************************/

	"string $1 = io.next();": {
		"prefix": "nw",
		"body": [
			"string $1 = io.next();",
			"$0",
		],
	},

	"string $1 = io.nextLine();": {
		"prefix": "nl",
		"body": [
			"string $1 = io.nextLine();",
			"$0",
		],
	},

	"int $1 = io.nextInt();": {
		"prefix": "ni",
		"body": [
			"int $1 = io.nextInt();",
			"$0",
		],
	},

	"vector<int> $1 = io.nextInts();": {
		"prefix": "na",
		"body": [
			"vector<int> $1 = io.nextInts();",
			"$0",
		],
	},

	"io.print($1);": {
		"prefix": "iop",
		"body": [
			"io.print($1);",
			"$0",
		],
	},

	"cout << $1 << endl;": {
		"prefix": "pv",
		"body": [
			"cout << $1 << endl;",
			"$0",
		],
	},

	"cout << \"$1\" << endl;": {
		"prefix": "pl",
		"body": [
			"cout << \"$1\" << endl;",
			"$0",
		],
	},

	"cout << \"YES\" << endl;": {
		"prefix": "yes",
		"body": [
			"cout << \"YES\" << endl;",
			"$0",
		],
	},

	"cout << \"NO\" << endl;": {
		"prefix": "no",
		"body": [
			"cout << \"NO\" << endl;",
			"$0",
		],
	},

	"io class": {
		"prefix": "io",
		"body": [
			"struct IO {",
			"  string next() {",
			"    string str;",
			"    cin >> str;",
			"    return str;",
			"  }",
			"",
			"  string nextLine() {",
			"    string str;",
			"    getline(cin, str);",
			"    return str;",
			"  }",
			"",
			"  int nextInt() {",
			"    int n;",
			"    cin >> n;",
			"    return n;",
			"  }",
			"",
			"  vector<int> nextInts() {",
			"    int n;",
			"    cin >> n;",
			"    return nextInts(n);",
			"  }",
			"",
			"  vector<int> nextInts(int n) {",
			"    vector<int> a(n);",
			"    rep(i, 0, n) cin >> a[i];",
			"    return a;",
			"  }",
			"",
			"  void print(vector<int> n, string separator = \" \") {",
			"    if (n.size() == 0) return;",
			"    rep(i, 0, n.size() - 1) cout << n[i] << separator;",
			"    cout << n[n.size() - 1] << endl;",
			"  }",
			"} io;",
			"$0",
		],
	},


	/*************************************/
	//          Useful macro related
	/*************************************/

	"Useful debugging function to print some variables": {
		"prefix": "dd",
		"body": [
			"#define debug(args...)                       \\",
			"  {                                          \\",
			"    string _s = #args;                       \\",
			"    replace(_s.begin(), _s.end(), ',', ' '); \\",
			"    stringstream _ss(_s);                    \\",
			"    istream_iterator<string> _it(_ss);       \\",
			"    err(_it, args);                          \\",
			"  }",
			"",
			"void err(istream_iterator<string> it) {}",
			"",
			"template <typename T, typename... Args>",
			"void err(istream_iterator<string> it, T a, Args... args) {",
			"  cerr << *it << \" = \" << a << endl;",
			"  err(++it, args...);",
			"}",
			"$0",
		],
	},

	"Use this for unordered map if needed": {
		"prefix": "um_hash",
		"body": [
			"// https://codeforces.com/blog/entry/62393",
			"struct custom_hash {",
			"  static uint64_t splitmix64(uint64_t x) {",
			"    // http://xorshift.di.unimi.it/splitmix64.c",
			"    x += 0x9e3779b97f4a7c15;",
			"    x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;",
			"    x = (x ^ (x >> 27)) * 0x94d049bb133111eb;",
			"    return x ^ (x >> 31);",
			"  }",
			"",
			"  size_t operator()(uint64_t x) const {",
			"    static const uint64_t FIXED_RANDOM =",
			"        chrono::steady_clock::now().time_since_epoch().count();",
			"    return splitmix64(x + FIXED_RANDOM);",
			"  }",
			"};",
			"",
			"#define umii unordered_map<int, int, custom_hash>",
			"#define ghtii gp_hash_table<int, int, custom_hash>",
			"#define boost(a)           \\",
			"  a.max_load_factor(0.25); \\",
			"  a.reserve(1 << 20);",
			"$0",
		],
	},

	"print code with line number": {
		"prefix": "db",
		"body": [
			"#define DB(x) cerr << __LINE__ << \": \" << #x << \" = \" << (x) << endl",
			"$0",
		],
	},

	"traverse forward and backward": {
		"prefix": "tr",
		"body": [
			"#define tr(container, it) \\",
			"  for (auto it = container.begin(); it != container.end(); it++)",
			"#define trr(container, it) \\",
			"  for (auto it = container.rbegin(); it != container.rend(); it++)",
			"$0",
		],
	},


	/***************************************/
	//         Map Related
	/***************************************/

	"map<char, bool> $1;": {
		"prefix": "mcb",
		"body": [
			"map<char, bool> $1;",
			"$0",
		],
	},

	"map<int, bool> $1;": {
		"prefix": "mib",
		"body": [
			"map<int, bool> $1;",
			"$0",
		],
	},

	"map<string, bool> $1;": {
		"prefix": "msb",
		"body": [
			"map<string, bool> $1;",
			"$0",
		],
	},

	"map<char, int> $1;": {
		"prefix": "mci",
		"body": [
			"map<char, int> $1;",
			"$0",
		],
	},

	"map<int, char> $1;": {
		"prefix": "mic",
		"body": [
			"map<int, char> $1;",
			"$0",
		],
	},

	"map<int, int> $1;": {
		"prefix": "mii",
		"body": [
			"map<int, int> $1;",
			"$0",
		],
	},

	"map<int, string> $1;": {
		"prefix": "mis",
		"body": [
			"map<int, string> $1;",
			"$0",
		],
	},

	"map<string, int> $1;": {
		"prefix": "msi",
		"body": [
			"map<string, int> $1;",
			"$0",
		],
	},

	"map<string, string> $1;": {
		"prefix": "mss",
		"body": [
			"map<string, string> $1;",
			"$0",
		],
	},

	"map of type1 and type2": {
		"prefix": "mtt",
		"body": [
			"map<$1, $2> $3;",
			"$0",
		],
	},


	/***************************************/
	//         New Cpp File
	/***************************************/

	"new cpp file": {
		"prefix": "nf",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"#define rep(i, a, b) for (auto i = (a); i < (b); ++i)",
			"",
			"int main(int argc, char const *argv[])",
			"{",
			"  $0  ",
			"  return 0;",
			"}",
		],
	},


	/***************************************/
	//         Variable Declaration
	/***************************************/

	"pair<int, int> $1;": {
		"prefix": "pii",
		"body": [
			"pair<int, int> $1;",
			"$0",
		],
	},


	/***************************************/
	//         Set Related
	/***************************************/

	"set<bool> $1;": {
		"prefix": "sb",
		"body": [
			"set<bool> $1;",
			"$0",
		],
	},

	"set<char> $1;": {
		"prefix": "sc",
		"body": [
			"set<char> $1;",
			"$0",
		],
	},

	"set<int> $1;": {
		"prefix": "si",
		"body": [
			"set<int> $1;",
			"$0",
		],
	},

	"set<long long> $1;": {
		"prefix": "sll",
		"body": [
			"set<long long> $1;",
			"$0",
		],
	},

	"set<double> $1;": {
		"prefix": "sd",
		"body": [
			"set<double> $1;",
			"$0",
		],
	},

	"set<long double> $1;": {
		"prefix": "sld",
		"body": [
			"set<long double> $1;",
			"$0",
		],
	},

	"set<string> $1;": {
		"prefix": "ss",
		"body": [
			"set<string> $1;",
			"$0",
		],
	},

	"set<pair<int, int>> $1;": {
		"prefix": "sii",
		"body": [
			"set<pair<int, int>> $1;",
			"$0",
		],
	},

	"set<vector<int>> $1;": {
		"prefix": "svi",
		"body": [
			"set<vector<int>> $1;",
			"$0",
		],
	},

	"set<set<int>> $1;": {
		"prefix": "ssi",
		"body": [
			"set<set<int>> $1;",
			"$0",
		],
	},

	"set of type": {
		"prefix": "st",
		"body": [
			"set<$1> $2;",
			"$0",
		],
	},


	/***************************************/
	//         Vector Related
	/***************************************/

	"vector<bool> $1;": {
		"prefix": "vb",
		"body": [
			"vector<bool> $1;",
			"$0",
		],
	},

	"vector<char> $1;": {
		"prefix": "vc",
		"body": [
			"vector<char> $1;",
			"$0",
		],
	},

	"vector<int> $1;": {
		"prefix": "vi",
		"body": [
			"vector<int> $1;",
			"$0",
		],
	},

	"vector<long long> $1;": {
		"prefix": "vll",
		"body": [
			"vector<long long> $1;",
			"$0",
		],
	},

	"vector<double> $1;": {
		"prefix": "vd",
		"body": [
			"vector<double> $1;",
			"$0",
		],
	},

	"vector<long double> $1;": {
		"prefix": "vld",
		"body": [
			"vector<long double> $1;",
			"$0",
		],
	},

	"vector<string> $1;": {
		"prefix": "vs",
		"body": [
			"vector<string> $1;",
			"$0",
		],
	},

	"vector<pair<int, int>> $1;": {
		"prefix": "vii",
		"body": [
			"vector<pair<int, int>> $1;",
			"$0",
		],
	},

	"vector<vector<int>> $1;": {
		"prefix": "vvi",
		"body": [
			"vector<vector<int>> $1;",
			"$0",
		],
	},

	"vector of type": {
		"prefix": "vt",
		"body": [
			"vector<$1> $2;",
			"$0",
		],
	},

}
